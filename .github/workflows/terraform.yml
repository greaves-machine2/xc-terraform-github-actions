name: "Terraform v1.07"
on:
  push:
    branches:
      - main
  pull_request:

jobs:
 
  terraform-waf-rules:
    name: "Test & Apply WAF Exceptions"
    runs-on: ubuntu-latest
    # needs: terraform-lb

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main        

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: timstamp_start
        run: |
          # export TIMESTAMP_START=$(date +%s)
          # echo "::set-env name=TIMESTAMP_START::$TIMESTAMP_START"


      # - name: Save timestamp_start to pipeline tfvars 
      #   run: |-
      #     cat > pipeline.auto.tfvars <<EOF
      #     start_timestamp = $(date +%s)
      #     EOF

      - name: tests
        run: |
          curl 'https://juice.gal.volcloud.net/rest/user/login' \
          -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36' \
          -H 'content-type: application/json; charset=UTF-8' \
          -H 'x-requested-with: XMLHttpRequest' \
          --data-raw '{"email":"' or 1=1","password":"bogus"}' \
          --compressed
        continue-on-error: true

      - name: timstamp_end
        run: |  
          # export TIMESTAMP_END=$(date +%s)
          # echo "::set-env name=TIMESTAMP_END::$TIMESTAMP_END"
          echo "TIMESTAMP_END=$(date +%s)" >> $GITHUB_ENV

      # - name: Save timestamp_end to pipeline tfvars
      #   run: |-
      #     cat >> pipeline.auto.tfvars <<EOF
      #     end_timestamp = $(date +%s)
      #     EOF

      - name: Terraform Init
        id: init2
        run: |
          terraform init \
          -backend-config="access_key=${{ secrets.AZURE_BACKEND_KEY }}"


        # working-directory: ./waf_exclusion_rules
  

      - name: Terraform Validate
        id: validate2
        run: terraform validate
        # working-directory: ./waf_exclusion_rules

      - name: Terraform Plan
        id: plan2
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        env:
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }} 
          TF_VAR_timestamp_start: ${{ env.TIMESTAMP_START }}
          TF_VAR_timestamp_end: ${{ env.TIMESTAMP_END }}
        # working-directory: ./waf_exclusion_rules

      - name: Terraform Apply
        id: apply2
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -no-color -input=false 
        env:
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_timestamp_start: $TIMESTAMP_START
          TF_VAR_timestamp_end: $TIMESTAMP_END
        # working-directory: ./waf_exclusion_rules
      
      - name: Output WAF Rules stdout
        run: echo ${{ steps.apply2.outputs.stdout }}
        continue-on-error: true

      
      # - name: Commit WAF Rules
      #   run: |
      #     git config user.name github-actions
      #     git config user.email github-actions@github.com
      #     git add .
      #     git commit -m "Modified by Github Actions workflow"
      #     git push
      #   working-directory: ./waf_exclusion_rules








      # - name: check_for-rules
      #   run: 


      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1