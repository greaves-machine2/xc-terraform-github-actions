name: "Terraform v1.06"
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform-lb:
    name: "Terraform-lb"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      # If LB object exists in state, returns true, else false.
      # - name: Terraform State 
      #   id: state
      #   run: |
      #     terraform state list | grep 'volterra_http_loadbalancer'
      #   continue-on-error: true

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false 

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false 

  terraform-waf-rules:
    name: "Terraform WAF Exclusion Rules"
    runs-on: ubuntu-latest
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }

      - name: timstamp_start
        run: export TF_VAR_timestamp_start=$(date +%s)

      # - name: tests
      #   run: |
      #     curl 'https://juice.gal.volcloud.net/rest/user/login' \
      #     -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36' \
      #     -H 'content-type: application/json; charset=UTF-8' \
      #     -H 'x-requested-with: XMLHttpRequest' \
      #     --data-raw '{"email":"' or 1=1","password":"bogus"}' \
      #     --compressed
      #     sleep 10
      #   continue-on-error: true

      # - name: timstamp_end
      #   run: export TF_VAR_timestamp_end=$(date +%s)

      # - name: Terraform Init
      #   id: init2
      #   run: terraform init
      #   working-directory: ./waf_exclusion_rules

      # - name: Terraform Validate
      #   id: validate2
      #   run: terraform validate
      #   working-directory: ./waf_exclusion_rules

      # - name: Terraform Plan
      #   id: plan2
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color -input=false 
      #   working-directory: ./waf_exclusion_rules

      # - name: Terraform Apply
      #   id: apply2
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false 
      #   working-directory: ./waf_exclusion_rules








      # - name: check_for-rules
      #   run: 


      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1